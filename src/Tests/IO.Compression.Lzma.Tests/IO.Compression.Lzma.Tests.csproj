<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;net6.0;net472</TargetFrameworks>
    <LangVersion>latest</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <RootNamespace>System.IO.Compression.Tests</RootNamespace>
    <AssemblyName>KingR.$(AssemblyName)</AssemblyName>
    <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>
    <OutputType>Exe</OutputType>
    <NoWarn>$(NoWarn);CA1822</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="..\*.lzma" Link="%(FileName)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <_TxtEmbeddedResource Include="..\*.txt" Link="%(FileName)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="GitHubActionsTestLogger" Version="2.4.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Testing.Extensions.CodeCoverage" Version="17.14.2" />
    <PackageReference Include="Microsoft.Testing.Platform.MSBuild" Version="1.6.3" />
    <PackageReference Include="TUnit" Version="0.18.60" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\IO.Compression.Lzma\IO.Compression.Lzma.csproj" />
  </ItemGroup>

  <UsingTask TaskName="ChangeLineEndings" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <DestinationFolder ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (Files.Length > 0)
{
    Result = new TaskItem[Files.Length];
    for (var i = 0; i < Files.Length; i++)
    {
        var item = Files[i];
        var link = item.GetMetadata("Link");
        var sourceItemSpec = item.ItemSpec;

        var destinationItemSpec = Path.Combine(DestinationFolder.ItemSpec, Path.GetFileName(item.ItemSpec));

        if (!File.Exists(destinationItemSpec))
        {
            File.WriteAllText(destinationItemSpec, File.ReadAllText(sourceItemSpec).Replace("\r\n", "\n"));
        }

        var destinationItem = new TaskItem(destinationItemSpec);
        if (link != null)
        {
            destinationItem.SetMetadata("Link", link);
        }

        Result[i] = destinationItem;
    }
}
]]>
      </Code>
    </Task>
  </UsingTask>



  <Target Name="_UpdateEmbeddedResources" BeforeTargets="AssignTargetPaths">

    <ChangeLineEndings Files="@(_TxtEmbeddedResource)" DestinationFolder="$(IntermediateOutputPath)">
      <Output ItemName="TxtEmbeddedResource" TaskParameter="Result" />
    </ChangeLineEndings>

    <ItemGroup>
      <EmbeddedResource Include="@(TxtEmbeddedResource)" />
    </ItemGroup>

  </Target>

</Project>
